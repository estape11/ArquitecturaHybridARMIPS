
module InstructionMemory (input     logic          clk,
								  input			logic		 wr,
								  input  logic      [31:0] address,
								  input      logic  [31:0] data_in,
								  output logic [31:0] data_out);
	
	logic [31:0] mem [42949672];
	
	always_ff @(posedge clk) begin
		if (wr == 1)
			mem[address] <= data_in;
		else
			data_out <= mem[address];
	end
endmodule
/*
module InstructionMemory (input  logic clk,
								  input  logic wr,
								  input  logic [31:0] address,
								  input  logic [31:0] data_in,
								  output logic [31:0] data_out);
	
	logic [39:0] mem [100];
	
	always_ff @(posedge clk) begin
		if (wr == 1)
			mem[31:0] <= data_in[31:0];
		else
			data_out[31:0] <= mem[2];
	end
endmodule
*/

/*module InstructionMemory (input  logic clk,
								  input  logic wr,
								  input  logic [8:0] address,
								  input  logic [31:0] data_in,
								  output logic [31:0] data_out);
	
	logic [31:0] mem [100];
	
	always_ff @(posedge clk) begin
		if (wr == 1)
			mem[address] <= data_in[31:0];
		else
			data_out[31:0] <= mem[address];
	end
endmodule*/